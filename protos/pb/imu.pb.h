// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#ifndef PROTOBUF_INCLUDED_imu_2eproto
#define PROTOBUF_INCLUDED_imu_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "utils.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_imu_2eproto 

namespace protobuf_imu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_imu_2eproto
namespace IMUConfig {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class PreIntegration;
class PreIntegrationDefaultTypeInternal;
extern PreIntegrationDefaultTypeInternal _PreIntegration_default_instance_;
class Vector3d;
class Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
}  // namespace IMUConfig
namespace google {
namespace protobuf {
template<> ::IMUConfig::Config* Arena::CreateMaybeMessage<::IMUConfig::Config>(Arena*);
template<> ::IMUConfig::PreIntegration* Arena::CreateMaybeMessage<::IMUConfig::PreIntegration>(Arena*);
template<> ::IMUConfig::Vector3d* Arena::CreateMaybeMessage<::IMUConfig::Vector3d>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace IMUConfig {

// ===================================================================

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IMUConfig.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string imu_file_path = 1;
  void clear_imu_file_path();
  static const int kImuFilePathFieldNumber = 1;
  const ::std::string& imu_file_path() const;
  void set_imu_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_imu_file_path(::std::string&& value);
  #endif
  void set_imu_file_path(const char* value);
  void set_imu_file_path(const char* value, size_t size);
  ::std::string* mutable_imu_file_path();
  ::std::string* release_imu_file_path();
  void set_allocated_imu_file_path(::std::string* imu_file_path);

  // string imu_topic = 2;
  void clear_imu_topic();
  static const int kImuTopicFieldNumber = 2;
  const ::std::string& imu_topic() const;
  void set_imu_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_imu_topic(::std::string&& value);
  #endif
  void set_imu_topic(const char* value);
  void set_imu_topic(const char* value, size_t size);
  ::std::string* mutable_imu_topic();
  ::std::string* release_imu_topic();
  void set_allocated_imu_topic(::std::string* imu_topic);

  // .IMUConfig.Vector3d transformation_i_c = 4;
  bool has_transformation_i_c() const;
  void clear_transformation_i_c();
  static const int kTransformationICFieldNumber = 4;
  private:
  const ::IMUConfig::Vector3d& _internal_transformation_i_c() const;
  public:
  const ::IMUConfig::Vector3d& transformation_i_c() const;
  ::IMUConfig::Vector3d* release_transformation_i_c();
  ::IMUConfig::Vector3d* mutable_transformation_i_c();
  void set_allocated_transformation_i_c(::IMUConfig::Vector3d* transformation_i_c);

  // .IMUConfig.Vector3d rotation_i_c = 5;
  bool has_rotation_i_c() const;
  void clear_rotation_i_c();
  static const int kRotationICFieldNumber = 5;
  private:
  const ::IMUConfig::Vector3d& _internal_rotation_i_c() const;
  public:
  const ::IMUConfig::Vector3d& rotation_i_c() const;
  ::IMUConfig::Vector3d* release_rotation_i_c();
  ::IMUConfig::Vector3d* mutable_rotation_i_c();
  void set_allocated_rotation_i_c(::IMUConfig::Vector3d* rotation_i_c);

  // .IMUConfig.Vector3d transformation_i_l = 6;
  bool has_transformation_i_l() const;
  void clear_transformation_i_l();
  static const int kTransformationILFieldNumber = 6;
  private:
  const ::IMUConfig::Vector3d& _internal_transformation_i_l() const;
  public:
  const ::IMUConfig::Vector3d& transformation_i_l() const;
  ::IMUConfig::Vector3d* release_transformation_i_l();
  ::IMUConfig::Vector3d* mutable_transformation_i_l();
  void set_allocated_transformation_i_l(::IMUConfig::Vector3d* transformation_i_l);

  // .IMUConfig.Vector3d rotation_i_l = 7;
  bool has_rotation_i_l() const;
  void clear_rotation_i_l();
  static const int kRotationILFieldNumber = 7;
  private:
  const ::IMUConfig::Vector3d& _internal_rotation_i_l() const;
  public:
  const ::IMUConfig::Vector3d& rotation_i_l() const;
  ::IMUConfig::Vector3d* release_rotation_i_l();
  ::IMUConfig::Vector3d* mutable_rotation_i_l();
  void set_allocated_rotation_i_l(::IMUConfig::Vector3d* rotation_i_l);

  // .IMUConfig.Vector3d transformation_i_b = 8;
  bool has_transformation_i_b() const;
  void clear_transformation_i_b();
  static const int kTransformationIBFieldNumber = 8;
  private:
  const ::IMUConfig::Vector3d& _internal_transformation_i_b() const;
  public:
  const ::IMUConfig::Vector3d& transformation_i_b() const;
  ::IMUConfig::Vector3d* release_transformation_i_b();
  ::IMUConfig::Vector3d* mutable_transformation_i_b();
  void set_allocated_transformation_i_b(::IMUConfig::Vector3d* transformation_i_b);

  // .IMUConfig.Vector3d rotation_i_b = 9;
  bool has_rotation_i_b() const;
  void clear_rotation_i_b();
  static const int kRotationIBFieldNumber = 9;
  private:
  const ::IMUConfig::Vector3d& _internal_rotation_i_b() const;
  public:
  const ::IMUConfig::Vector3d& rotation_i_b() const;
  ::IMUConfig::Vector3d* release_rotation_i_b();
  ::IMUConfig::Vector3d* mutable_rotation_i_b();
  void set_allocated_rotation_i_b(::IMUConfig::Vector3d* rotation_i_b);

  // .IMUConfig.PreIntegration preintegration = 10;
  bool has_preintegration() const;
  void clear_preintegration();
  static const int kPreintegrationFieldNumber = 10;
  private:
  const ::IMUConfig::PreIntegration& _internal_preintegration() const;
  public:
  const ::IMUConfig::PreIntegration& preintegration() const;
  ::IMUConfig::PreIntegration* release_preintegration();
  ::IMUConfig::PreIntegration* mutable_preintegration();
  void set_allocated_preintegration(::IMUConfig::PreIntegration* preintegration);

  // .Utils.Config utils_config = 11;
  bool has_utils_config() const;
  void clear_utils_config();
  static const int kUtilsConfigFieldNumber = 11;
  private:
  const ::Utils::Config& _internal_utils_config() const;
  public:
  const ::Utils::Config& utils_config() const;
  ::Utils::Config* release_utils_config();
  ::Utils::Config* mutable_utils_config();
  void set_allocated_utils_config(::Utils::Config* utils_config);

  // int32 frequency = 3;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 3;
  ::google::protobuf::int32 frequency() const;
  void set_frequency(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IMUConfig.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imu_file_path_;
  ::google::protobuf::internal::ArenaStringPtr imu_topic_;
  ::IMUConfig::Vector3d* transformation_i_c_;
  ::IMUConfig::Vector3d* rotation_i_c_;
  ::IMUConfig::Vector3d* transformation_i_l_;
  ::IMUConfig::Vector3d* rotation_i_l_;
  ::IMUConfig::Vector3d* transformation_i_b_;
  ::IMUConfig::Vector3d* rotation_i_b_;
  ::IMUConfig::PreIntegration* preintegration_;
  ::Utils::Config* utils_config_;
  ::google::protobuf::int32 frequency_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_imu_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PreIntegration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IMUConfig.PreIntegration) */ {
 public:
  PreIntegration();
  virtual ~PreIntegration();

  PreIntegration(const PreIntegration& from);

  inline PreIntegration& operator=(const PreIntegration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreIntegration(PreIntegration&& from) noexcept
    : PreIntegration() {
    *this = ::std::move(from);
  }

  inline PreIntegration& operator=(PreIntegration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreIntegration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreIntegration* internal_default_instance() {
    return reinterpret_cast<const PreIntegration*>(
               &_PreIntegration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PreIntegration* other);
  friend void swap(PreIntegration& a, PreIntegration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreIntegration* New() const final {
    return CreateMaybeMessage<PreIntegration>(NULL);
  }

  PreIntegration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PreIntegration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PreIntegration& from);
  void MergeFrom(const PreIntegration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreIntegration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .IMUConfig.Vector3d init_ba = 1;
  bool has_init_ba() const;
  void clear_init_ba();
  static const int kInitBaFieldNumber = 1;
  private:
  const ::IMUConfig::Vector3d& _internal_init_ba() const;
  public:
  const ::IMUConfig::Vector3d& init_ba() const;
  ::IMUConfig::Vector3d* release_init_ba();
  ::IMUConfig::Vector3d* mutable_init_ba();
  void set_allocated_init_ba(::IMUConfig::Vector3d* init_ba);

  // .IMUConfig.Vector3d init_bg = 2;
  bool has_init_bg() const;
  void clear_init_bg();
  static const int kInitBgFieldNumber = 2;
  private:
  const ::IMUConfig::Vector3d& _internal_init_bg() const;
  public:
  const ::IMUConfig::Vector3d& init_bg() const;
  ::IMUConfig::Vector3d* release_init_bg();
  ::IMUConfig::Vector3d* mutable_init_bg();
  void set_allocated_init_bg(::IMUConfig::Vector3d* init_bg);

  // double noise_acc = 3;
  void clear_noise_acc();
  static const int kNoiseAccFieldNumber = 3;
  double noise_acc() const;
  void set_noise_acc(double value);

  // double noise_gyr = 4;
  void clear_noise_gyr();
  static const int kNoiseGyrFieldNumber = 4;
  double noise_gyr() const;
  void set_noise_gyr(double value);

  // @@protoc_insertion_point(class_scope:IMUConfig.PreIntegration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::IMUConfig::Vector3d* init_ba_;
  ::IMUConfig::Vector3d* init_bg_;
  double noise_acc_;
  double noise_gyr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_imu_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vector3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IMUConfig.Vector3d) */ {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Vector3d* other);
  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const final {
    return CreateMaybeMessage<Vector3d>(NULL);
  }

  Vector3d* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector3d>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:IMUConfig.Vector3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_imu_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// string imu_file_path = 1;
inline void Config::clear_imu_file_path() {
  imu_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::imu_file_path() const {
  // @@protoc_insertion_point(field_get:IMUConfig.Config.imu_file_path)
  return imu_file_path_.GetNoArena();
}
inline void Config::set_imu_file_path(const ::std::string& value) {
  
  imu_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMUConfig.Config.imu_file_path)
}
#if LANG_CXX11
inline void Config::set_imu_file_path(::std::string&& value) {
  
  imu_file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IMUConfig.Config.imu_file_path)
}
#endif
inline void Config::set_imu_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imu_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMUConfig.Config.imu_file_path)
}
inline void Config::set_imu_file_path(const char* value, size_t size) {
  
  imu_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMUConfig.Config.imu_file_path)
}
inline ::std::string* Config::mutable_imu_file_path() {
  
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.imu_file_path)
  return imu_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_imu_file_path() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.imu_file_path)
  
  return imu_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_imu_file_path(::std::string* imu_file_path) {
  if (imu_file_path != NULL) {
    
  } else {
    
  }
  imu_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imu_file_path);
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.imu_file_path)
}

// string imu_topic = 2;
inline void Config::clear_imu_topic() {
  imu_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::imu_topic() const {
  // @@protoc_insertion_point(field_get:IMUConfig.Config.imu_topic)
  return imu_topic_.GetNoArena();
}
inline void Config::set_imu_topic(const ::std::string& value) {
  
  imu_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMUConfig.Config.imu_topic)
}
#if LANG_CXX11
inline void Config::set_imu_topic(::std::string&& value) {
  
  imu_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IMUConfig.Config.imu_topic)
}
#endif
inline void Config::set_imu_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imu_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMUConfig.Config.imu_topic)
}
inline void Config::set_imu_topic(const char* value, size_t size) {
  
  imu_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMUConfig.Config.imu_topic)
}
inline ::std::string* Config::mutable_imu_topic() {
  
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.imu_topic)
  return imu_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_imu_topic() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.imu_topic)
  
  return imu_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_imu_topic(::std::string* imu_topic) {
  if (imu_topic != NULL) {
    
  } else {
    
  }
  imu_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imu_topic);
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.imu_topic)
}

// int32 frequency = 3;
inline void Config::clear_frequency() {
  frequency_ = 0;
}
inline ::google::protobuf::int32 Config::frequency() const {
  // @@protoc_insertion_point(field_get:IMUConfig.Config.frequency)
  return frequency_;
}
inline void Config::set_frequency(::google::protobuf::int32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:IMUConfig.Config.frequency)
}

// .IMUConfig.Vector3d transformation_i_c = 4;
inline bool Config::has_transformation_i_c() const {
  return this != internal_default_instance() && transformation_i_c_ != NULL;
}
inline void Config::clear_transformation_i_c() {
  if (GetArenaNoVirtual() == NULL && transformation_i_c_ != NULL) {
    delete transformation_i_c_;
  }
  transformation_i_c_ = NULL;
}
inline const ::IMUConfig::Vector3d& Config::_internal_transformation_i_c() const {
  return *transformation_i_c_;
}
inline const ::IMUConfig::Vector3d& Config::transformation_i_c() const {
  const ::IMUConfig::Vector3d* p = transformation_i_c_;
  // @@protoc_insertion_point(field_get:IMUConfig.Config.transformation_i_c)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::Vector3d*>(
      &::IMUConfig::_Vector3d_default_instance_);
}
inline ::IMUConfig::Vector3d* Config::release_transformation_i_c() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.transformation_i_c)
  
  ::IMUConfig::Vector3d* temp = transformation_i_c_;
  transformation_i_c_ = NULL;
  return temp;
}
inline ::IMUConfig::Vector3d* Config::mutable_transformation_i_c() {
  
  if (transformation_i_c_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::Vector3d>(GetArenaNoVirtual());
    transformation_i_c_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.transformation_i_c)
  return transformation_i_c_;
}
inline void Config::set_allocated_transformation_i_c(::IMUConfig::Vector3d* transformation_i_c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transformation_i_c_;
  }
  if (transformation_i_c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transformation_i_c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transformation_i_c, submessage_arena);
    }
    
  } else {
    
  }
  transformation_i_c_ = transformation_i_c;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.transformation_i_c)
}

// .IMUConfig.Vector3d rotation_i_c = 5;
inline bool Config::has_rotation_i_c() const {
  return this != internal_default_instance() && rotation_i_c_ != NULL;
}
inline void Config::clear_rotation_i_c() {
  if (GetArenaNoVirtual() == NULL && rotation_i_c_ != NULL) {
    delete rotation_i_c_;
  }
  rotation_i_c_ = NULL;
}
inline const ::IMUConfig::Vector3d& Config::_internal_rotation_i_c() const {
  return *rotation_i_c_;
}
inline const ::IMUConfig::Vector3d& Config::rotation_i_c() const {
  const ::IMUConfig::Vector3d* p = rotation_i_c_;
  // @@protoc_insertion_point(field_get:IMUConfig.Config.rotation_i_c)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::Vector3d*>(
      &::IMUConfig::_Vector3d_default_instance_);
}
inline ::IMUConfig::Vector3d* Config::release_rotation_i_c() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.rotation_i_c)
  
  ::IMUConfig::Vector3d* temp = rotation_i_c_;
  rotation_i_c_ = NULL;
  return temp;
}
inline ::IMUConfig::Vector3d* Config::mutable_rotation_i_c() {
  
  if (rotation_i_c_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::Vector3d>(GetArenaNoVirtual());
    rotation_i_c_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.rotation_i_c)
  return rotation_i_c_;
}
inline void Config::set_allocated_rotation_i_c(::IMUConfig::Vector3d* rotation_i_c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_i_c_;
  }
  if (rotation_i_c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation_i_c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation_i_c, submessage_arena);
    }
    
  } else {
    
  }
  rotation_i_c_ = rotation_i_c;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.rotation_i_c)
}

// .IMUConfig.Vector3d transformation_i_l = 6;
inline bool Config::has_transformation_i_l() const {
  return this != internal_default_instance() && transformation_i_l_ != NULL;
}
inline void Config::clear_transformation_i_l() {
  if (GetArenaNoVirtual() == NULL && transformation_i_l_ != NULL) {
    delete transformation_i_l_;
  }
  transformation_i_l_ = NULL;
}
inline const ::IMUConfig::Vector3d& Config::_internal_transformation_i_l() const {
  return *transformation_i_l_;
}
inline const ::IMUConfig::Vector3d& Config::transformation_i_l() const {
  const ::IMUConfig::Vector3d* p = transformation_i_l_;
  // @@protoc_insertion_point(field_get:IMUConfig.Config.transformation_i_l)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::Vector3d*>(
      &::IMUConfig::_Vector3d_default_instance_);
}
inline ::IMUConfig::Vector3d* Config::release_transformation_i_l() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.transformation_i_l)
  
  ::IMUConfig::Vector3d* temp = transformation_i_l_;
  transformation_i_l_ = NULL;
  return temp;
}
inline ::IMUConfig::Vector3d* Config::mutable_transformation_i_l() {
  
  if (transformation_i_l_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::Vector3d>(GetArenaNoVirtual());
    transformation_i_l_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.transformation_i_l)
  return transformation_i_l_;
}
inline void Config::set_allocated_transformation_i_l(::IMUConfig::Vector3d* transformation_i_l) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transformation_i_l_;
  }
  if (transformation_i_l) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transformation_i_l = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transformation_i_l, submessage_arena);
    }
    
  } else {
    
  }
  transformation_i_l_ = transformation_i_l;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.transformation_i_l)
}

// .IMUConfig.Vector3d rotation_i_l = 7;
inline bool Config::has_rotation_i_l() const {
  return this != internal_default_instance() && rotation_i_l_ != NULL;
}
inline void Config::clear_rotation_i_l() {
  if (GetArenaNoVirtual() == NULL && rotation_i_l_ != NULL) {
    delete rotation_i_l_;
  }
  rotation_i_l_ = NULL;
}
inline const ::IMUConfig::Vector3d& Config::_internal_rotation_i_l() const {
  return *rotation_i_l_;
}
inline const ::IMUConfig::Vector3d& Config::rotation_i_l() const {
  const ::IMUConfig::Vector3d* p = rotation_i_l_;
  // @@protoc_insertion_point(field_get:IMUConfig.Config.rotation_i_l)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::Vector3d*>(
      &::IMUConfig::_Vector3d_default_instance_);
}
inline ::IMUConfig::Vector3d* Config::release_rotation_i_l() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.rotation_i_l)
  
  ::IMUConfig::Vector3d* temp = rotation_i_l_;
  rotation_i_l_ = NULL;
  return temp;
}
inline ::IMUConfig::Vector3d* Config::mutable_rotation_i_l() {
  
  if (rotation_i_l_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::Vector3d>(GetArenaNoVirtual());
    rotation_i_l_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.rotation_i_l)
  return rotation_i_l_;
}
inline void Config::set_allocated_rotation_i_l(::IMUConfig::Vector3d* rotation_i_l) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_i_l_;
  }
  if (rotation_i_l) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation_i_l = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation_i_l, submessage_arena);
    }
    
  } else {
    
  }
  rotation_i_l_ = rotation_i_l;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.rotation_i_l)
}

// .IMUConfig.Vector3d transformation_i_b = 8;
inline bool Config::has_transformation_i_b() const {
  return this != internal_default_instance() && transformation_i_b_ != NULL;
}
inline void Config::clear_transformation_i_b() {
  if (GetArenaNoVirtual() == NULL && transformation_i_b_ != NULL) {
    delete transformation_i_b_;
  }
  transformation_i_b_ = NULL;
}
inline const ::IMUConfig::Vector3d& Config::_internal_transformation_i_b() const {
  return *transformation_i_b_;
}
inline const ::IMUConfig::Vector3d& Config::transformation_i_b() const {
  const ::IMUConfig::Vector3d* p = transformation_i_b_;
  // @@protoc_insertion_point(field_get:IMUConfig.Config.transformation_i_b)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::Vector3d*>(
      &::IMUConfig::_Vector3d_default_instance_);
}
inline ::IMUConfig::Vector3d* Config::release_transformation_i_b() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.transformation_i_b)
  
  ::IMUConfig::Vector3d* temp = transformation_i_b_;
  transformation_i_b_ = NULL;
  return temp;
}
inline ::IMUConfig::Vector3d* Config::mutable_transformation_i_b() {
  
  if (transformation_i_b_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::Vector3d>(GetArenaNoVirtual());
    transformation_i_b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.transformation_i_b)
  return transformation_i_b_;
}
inline void Config::set_allocated_transformation_i_b(::IMUConfig::Vector3d* transformation_i_b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transformation_i_b_;
  }
  if (transformation_i_b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transformation_i_b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transformation_i_b, submessage_arena);
    }
    
  } else {
    
  }
  transformation_i_b_ = transformation_i_b;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.transformation_i_b)
}

// .IMUConfig.Vector3d rotation_i_b = 9;
inline bool Config::has_rotation_i_b() const {
  return this != internal_default_instance() && rotation_i_b_ != NULL;
}
inline void Config::clear_rotation_i_b() {
  if (GetArenaNoVirtual() == NULL && rotation_i_b_ != NULL) {
    delete rotation_i_b_;
  }
  rotation_i_b_ = NULL;
}
inline const ::IMUConfig::Vector3d& Config::_internal_rotation_i_b() const {
  return *rotation_i_b_;
}
inline const ::IMUConfig::Vector3d& Config::rotation_i_b() const {
  const ::IMUConfig::Vector3d* p = rotation_i_b_;
  // @@protoc_insertion_point(field_get:IMUConfig.Config.rotation_i_b)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::Vector3d*>(
      &::IMUConfig::_Vector3d_default_instance_);
}
inline ::IMUConfig::Vector3d* Config::release_rotation_i_b() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.rotation_i_b)
  
  ::IMUConfig::Vector3d* temp = rotation_i_b_;
  rotation_i_b_ = NULL;
  return temp;
}
inline ::IMUConfig::Vector3d* Config::mutable_rotation_i_b() {
  
  if (rotation_i_b_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::Vector3d>(GetArenaNoVirtual());
    rotation_i_b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.rotation_i_b)
  return rotation_i_b_;
}
inline void Config::set_allocated_rotation_i_b(::IMUConfig::Vector3d* rotation_i_b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_i_b_;
  }
  if (rotation_i_b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation_i_b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation_i_b, submessage_arena);
    }
    
  } else {
    
  }
  rotation_i_b_ = rotation_i_b;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.rotation_i_b)
}

// .IMUConfig.PreIntegration preintegration = 10;
inline bool Config::has_preintegration() const {
  return this != internal_default_instance() && preintegration_ != NULL;
}
inline void Config::clear_preintegration() {
  if (GetArenaNoVirtual() == NULL && preintegration_ != NULL) {
    delete preintegration_;
  }
  preintegration_ = NULL;
}
inline const ::IMUConfig::PreIntegration& Config::_internal_preintegration() const {
  return *preintegration_;
}
inline const ::IMUConfig::PreIntegration& Config::preintegration() const {
  const ::IMUConfig::PreIntegration* p = preintegration_;
  // @@protoc_insertion_point(field_get:IMUConfig.Config.preintegration)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::PreIntegration*>(
      &::IMUConfig::_PreIntegration_default_instance_);
}
inline ::IMUConfig::PreIntegration* Config::release_preintegration() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.preintegration)
  
  ::IMUConfig::PreIntegration* temp = preintegration_;
  preintegration_ = NULL;
  return temp;
}
inline ::IMUConfig::PreIntegration* Config::mutable_preintegration() {
  
  if (preintegration_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::PreIntegration>(GetArenaNoVirtual());
    preintegration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.preintegration)
  return preintegration_;
}
inline void Config::set_allocated_preintegration(::IMUConfig::PreIntegration* preintegration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete preintegration_;
  }
  if (preintegration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      preintegration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preintegration, submessage_arena);
    }
    
  } else {
    
  }
  preintegration_ = preintegration;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.preintegration)
}

// .Utils.Config utils_config = 11;
inline bool Config::has_utils_config() const {
  return this != internal_default_instance() && utils_config_ != NULL;
}
inline const ::Utils::Config& Config::_internal_utils_config() const {
  return *utils_config_;
}
inline const ::Utils::Config& Config::utils_config() const {
  const ::Utils::Config* p = utils_config_;
  // @@protoc_insertion_point(field_get:IMUConfig.Config.utils_config)
  return p != NULL ? *p : *reinterpret_cast<const ::Utils::Config*>(
      &::Utils::_Config_default_instance_);
}
inline ::Utils::Config* Config::release_utils_config() {
  // @@protoc_insertion_point(field_release:IMUConfig.Config.utils_config)
  
  ::Utils::Config* temp = utils_config_;
  utils_config_ = NULL;
  return temp;
}
inline ::Utils::Config* Config::mutable_utils_config() {
  
  if (utils_config_ == NULL) {
    auto* p = CreateMaybeMessage<::Utils::Config>(GetArenaNoVirtual());
    utils_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.Config.utils_config)
  return utils_config_;
}
inline void Config::set_allocated_utils_config(::Utils::Config* utils_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(utils_config_);
  }
  if (utils_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      utils_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, utils_config, submessage_arena);
    }
    
  } else {
    
  }
  utils_config_ = utils_config;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.Config.utils_config)
}

// -------------------------------------------------------------------

// PreIntegration

// .IMUConfig.Vector3d init_ba = 1;
inline bool PreIntegration::has_init_ba() const {
  return this != internal_default_instance() && init_ba_ != NULL;
}
inline void PreIntegration::clear_init_ba() {
  if (GetArenaNoVirtual() == NULL && init_ba_ != NULL) {
    delete init_ba_;
  }
  init_ba_ = NULL;
}
inline const ::IMUConfig::Vector3d& PreIntegration::_internal_init_ba() const {
  return *init_ba_;
}
inline const ::IMUConfig::Vector3d& PreIntegration::init_ba() const {
  const ::IMUConfig::Vector3d* p = init_ba_;
  // @@protoc_insertion_point(field_get:IMUConfig.PreIntegration.init_ba)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::Vector3d*>(
      &::IMUConfig::_Vector3d_default_instance_);
}
inline ::IMUConfig::Vector3d* PreIntegration::release_init_ba() {
  // @@protoc_insertion_point(field_release:IMUConfig.PreIntegration.init_ba)
  
  ::IMUConfig::Vector3d* temp = init_ba_;
  init_ba_ = NULL;
  return temp;
}
inline ::IMUConfig::Vector3d* PreIntegration::mutable_init_ba() {
  
  if (init_ba_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::Vector3d>(GetArenaNoVirtual());
    init_ba_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.PreIntegration.init_ba)
  return init_ba_;
}
inline void PreIntegration::set_allocated_init_ba(::IMUConfig::Vector3d* init_ba) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_ba_;
  }
  if (init_ba) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init_ba = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_ba, submessage_arena);
    }
    
  } else {
    
  }
  init_ba_ = init_ba;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.PreIntegration.init_ba)
}

// .IMUConfig.Vector3d init_bg = 2;
inline bool PreIntegration::has_init_bg() const {
  return this != internal_default_instance() && init_bg_ != NULL;
}
inline void PreIntegration::clear_init_bg() {
  if (GetArenaNoVirtual() == NULL && init_bg_ != NULL) {
    delete init_bg_;
  }
  init_bg_ = NULL;
}
inline const ::IMUConfig::Vector3d& PreIntegration::_internal_init_bg() const {
  return *init_bg_;
}
inline const ::IMUConfig::Vector3d& PreIntegration::init_bg() const {
  const ::IMUConfig::Vector3d* p = init_bg_;
  // @@protoc_insertion_point(field_get:IMUConfig.PreIntegration.init_bg)
  return p != NULL ? *p : *reinterpret_cast<const ::IMUConfig::Vector3d*>(
      &::IMUConfig::_Vector3d_default_instance_);
}
inline ::IMUConfig::Vector3d* PreIntegration::release_init_bg() {
  // @@protoc_insertion_point(field_release:IMUConfig.PreIntegration.init_bg)
  
  ::IMUConfig::Vector3d* temp = init_bg_;
  init_bg_ = NULL;
  return temp;
}
inline ::IMUConfig::Vector3d* PreIntegration::mutable_init_bg() {
  
  if (init_bg_ == NULL) {
    auto* p = CreateMaybeMessage<::IMUConfig::Vector3d>(GetArenaNoVirtual());
    init_bg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IMUConfig.PreIntegration.init_bg)
  return init_bg_;
}
inline void PreIntegration::set_allocated_init_bg(::IMUConfig::Vector3d* init_bg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_bg_;
  }
  if (init_bg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init_bg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_bg, submessage_arena);
    }
    
  } else {
    
  }
  init_bg_ = init_bg;
  // @@protoc_insertion_point(field_set_allocated:IMUConfig.PreIntegration.init_bg)
}

// double noise_acc = 3;
inline void PreIntegration::clear_noise_acc() {
  noise_acc_ = 0;
}
inline double PreIntegration::noise_acc() const {
  // @@protoc_insertion_point(field_get:IMUConfig.PreIntegration.noise_acc)
  return noise_acc_;
}
inline void PreIntegration::set_noise_acc(double value) {
  
  noise_acc_ = value;
  // @@protoc_insertion_point(field_set:IMUConfig.PreIntegration.noise_acc)
}

// double noise_gyr = 4;
inline void PreIntegration::clear_noise_gyr() {
  noise_gyr_ = 0;
}
inline double PreIntegration::noise_gyr() const {
  // @@protoc_insertion_point(field_get:IMUConfig.PreIntegration.noise_gyr)
  return noise_gyr_;
}
inline void PreIntegration::set_noise_gyr(double value) {
  
  noise_gyr_ = value;
  // @@protoc_insertion_point(field_set:IMUConfig.PreIntegration.noise_gyr)
}

// -------------------------------------------------------------------

// Vector3d

// double x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:IMUConfig.Vector3d.x)
  return x_;
}
inline void Vector3d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:IMUConfig.Vector3d.x)
}

// double y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:IMUConfig.Vector3d.y)
  return y_;
}
inline void Vector3d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:IMUConfig.Vector3d.y)
}

// double z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:IMUConfig.Vector3d.z)
  return z_;
}
inline void Vector3d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:IMUConfig.Vector3d.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IMUConfig

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_imu_2eproto
