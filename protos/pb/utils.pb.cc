// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utils.proto

#include "utils.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_utils_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_utils_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LoggerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_utils_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimerConfig;
}  // namespace protobuf_utils_2eproto
namespace Utils {
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
} _Config_default_instance_;
class LoggerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoggerConfig>
      _instance;
} _LoggerConfig_default_instance_;
class TimerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimerConfig>
      _instance;
} _TimerConfig_default_instance_;
}  // namespace Utils
namespace protobuf_utils_2eproto {
static void InitDefaultsConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Utils::_Config_default_instance_;
    new (ptr) ::Utils::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Utils::Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConfig}, {
      &protobuf_utils_2eproto::scc_info_LoggerConfig.base,
      &protobuf_utils_2eproto::scc_info_TimerConfig.base,}};

static void InitDefaultsLoggerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Utils::_LoggerConfig_default_instance_;
    new (ptr) ::Utils::LoggerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Utils::LoggerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoggerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoggerConfig}, {}};

static void InitDefaultsTimerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Utils::_TimerConfig_default_instance_;
    new (ptr) ::Utils::TimerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Utils::TimerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimerConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Config.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoggerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimerConfig.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::Config, logger_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::Config, timer_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::LoggerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::LoggerConfig, log_file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::LoggerConfig, enable_console_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::LoggerConfig, console_log_levels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::TimerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Utils::TimerConfig, time_unit_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Utils::Config)},
  { 7, -1, sizeof(::Utils::LoggerConfig)},
  { 15, -1, sizeof(::Utils::TimerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Utils::_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Utils::_LoggerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Utils::_TimerConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "utils.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013utils.proto\022\005Utils\"^\n\006Config\022*\n\rlogger"
      "_config\030\001 \001(\0132\023.Utils.LoggerConfig\022(\n\014ti"
      "mer_config\030\002 \001(\0132\022.Utils.TimerConfig\"]\n\014"
      "LoggerConfig\022\025\n\rlog_file_path\030\001 \001(\t\022\032\n\022e"
      "nable_console_log\030\002 \001(\010\022\032\n\022console_log_l"
      "evels\030\003 \003(\t\" \n\013TimerConfig\022\021\n\ttime_unit\030"
      "\001 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "utils.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_utils_2eproto
namespace Utils {

// ===================================================================

void Config::InitAsDefaultInstance() {
  ::Utils::_Config_default_instance_._instance.get_mutable()->logger_config_ = const_cast< ::Utils::LoggerConfig*>(
      ::Utils::LoggerConfig::internal_default_instance());
  ::Utils::_Config_default_instance_._instance.get_mutable()->timer_config_ = const_cast< ::Utils::TimerConfig*>(
      ::Utils::TimerConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kLoggerConfigFieldNumber;
const int Config::kTimerConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_utils_2eproto::scc_info_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Utils.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logger_config()) {
    logger_config_ = new ::Utils::LoggerConfig(*from.logger_config_);
  } else {
    logger_config_ = NULL;
  }
  if (from.has_timer_config()) {
    timer_config_ = new ::Utils::TimerConfig(*from.timer_config_);
  } else {
    timer_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Utils.Config)
}

void Config::SharedCtor() {
  ::memset(&logger_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timer_config_) -
      reinterpret_cast<char*>(&logger_config_)) + sizeof(timer_config_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:Utils.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != internal_default_instance()) delete logger_config_;
  if (this != internal_default_instance()) delete timer_config_;
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  ::protobuf_utils_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_utils_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_utils_2eproto::scc_info_Config.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:Utils.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && logger_config_ != NULL) {
    delete logger_config_;
  }
  logger_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && timer_config_ != NULL) {
    delete timer_config_;
  }
  timer_config_ = NULL;
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Utils.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Utils.LoggerConfig logger_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logger_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Utils.TimerConfig timer_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timer_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Utils.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Utils.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Utils.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Utils.LoggerConfig logger_config = 1;
  if (this->has_logger_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_logger_config(), output);
  }

  // .Utils.TimerConfig timer_config = 2;
  if (this->has_timer_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timer_config(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Utils.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Utils.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Utils.LoggerConfig logger_config = 1;
  if (this->has_logger_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_logger_config(), deterministic, target);
  }

  // .Utils.TimerConfig timer_config = 2;
  if (this->has_timer_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timer_config(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Utils.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Utils.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Utils.LoggerConfig logger_config = 1;
  if (this->has_logger_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *logger_config_);
  }

  // .Utils.TimerConfig timer_config = 2;
  if (this->has_timer_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timer_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Utils.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Utils.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Utils.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Utils.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logger_config()) {
    mutable_logger_config()->::Utils::LoggerConfig::MergeFrom(from.logger_config());
  }
  if (from.has_timer_config()) {
    mutable_timer_config()->::Utils::TimerConfig::MergeFrom(from.timer_config());
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Utils.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Utils.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  swap(logger_config_, other->logger_config_);
  swap(timer_config_, other->timer_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_utils_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_utils_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoggerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggerConfig::kLogFilePathFieldNumber;
const int LoggerConfig::kEnableConsoleLogFieldNumber;
const int LoggerConfig::kConsoleLogLevelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggerConfig::LoggerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_utils_2eproto::scc_info_LoggerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Utils.LoggerConfig)
}
LoggerConfig::LoggerConfig(const LoggerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      console_log_levels_(from.console_log_levels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log_file_path().size() > 0) {
    log_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_file_path_);
  }
  enable_console_log_ = from.enable_console_log_;
  // @@protoc_insertion_point(copy_constructor:Utils.LoggerConfig)
}

void LoggerConfig::SharedCtor() {
  log_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_console_log_ = false;
}

LoggerConfig::~LoggerConfig() {
  // @@protoc_insertion_point(destructor:Utils.LoggerConfig)
  SharedDtor();
}

void LoggerConfig::SharedDtor() {
  log_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoggerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoggerConfig::descriptor() {
  ::protobuf_utils_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_utils_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoggerConfig& LoggerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_utils_2eproto::scc_info_LoggerConfig.base);
  return *internal_default_instance();
}


void LoggerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Utils.LoggerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  console_log_levels_.Clear();
  log_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_console_log_ = false;
  _internal_metadata_.Clear();
}

bool LoggerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Utils.LoggerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string log_file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_file_path().data(), static_cast<int>(this->log_file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Utils.LoggerConfig.log_file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_console_log = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_console_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string console_log_levels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_console_log_levels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->console_log_levels(this->console_log_levels_size() - 1).data(),
            static_cast<int>(this->console_log_levels(this->console_log_levels_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Utils.LoggerConfig.console_log_levels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Utils.LoggerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Utils.LoggerConfig)
  return false;
#undef DO_
}

void LoggerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Utils.LoggerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string log_file_path = 1;
  if (this->log_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_file_path().data(), static_cast<int>(this->log_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Utils.LoggerConfig.log_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log_file_path(), output);
  }

  // bool enable_console_log = 2;
  if (this->enable_console_log() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_console_log(), output);
  }

  // repeated string console_log_levels = 3;
  for (int i = 0, n = this->console_log_levels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->console_log_levels(i).data(), static_cast<int>(this->console_log_levels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Utils.LoggerConfig.console_log_levels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->console_log_levels(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Utils.LoggerConfig)
}

::google::protobuf::uint8* LoggerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Utils.LoggerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string log_file_path = 1;
  if (this->log_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_file_path().data(), static_cast<int>(this->log_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Utils.LoggerConfig.log_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_file_path(), target);
  }

  // bool enable_console_log = 2;
  if (this->enable_console_log() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_console_log(), target);
  }

  // repeated string console_log_levels = 3;
  for (int i = 0, n = this->console_log_levels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->console_log_levels(i).data(), static_cast<int>(this->console_log_levels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Utils.LoggerConfig.console_log_levels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->console_log_levels(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Utils.LoggerConfig)
  return target;
}

size_t LoggerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Utils.LoggerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string console_log_levels = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->console_log_levels_size());
  for (int i = 0, n = this->console_log_levels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->console_log_levels(i));
  }

  // string log_file_path = 1;
  if (this->log_file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log_file_path());
  }

  // bool enable_console_log = 2;
  if (this->enable_console_log() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Utils.LoggerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Utils.LoggerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Utils.LoggerConfig)
    MergeFrom(*source);
  }
}

void LoggerConfig::MergeFrom(const LoggerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Utils.LoggerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  console_log_levels_.MergeFrom(from.console_log_levels_);
  if (from.log_file_path().size() > 0) {

    log_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_file_path_);
  }
  if (from.enable_console_log() != 0) {
    set_enable_console_log(from.enable_console_log());
  }
}

void LoggerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Utils.LoggerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggerConfig::CopyFrom(const LoggerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Utils.LoggerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggerConfig::IsInitialized() const {
  return true;
}

void LoggerConfig::Swap(LoggerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoggerConfig::InternalSwap(LoggerConfig* other) {
  using std::swap;
  console_log_levels_.InternalSwap(CastToBase(&other->console_log_levels_));
  log_file_path_.Swap(&other->log_file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enable_console_log_, other->enable_console_log_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoggerConfig::GetMetadata() const {
  protobuf_utils_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_utils_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimerConfig::kTimeUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimerConfig::TimerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_utils_2eproto::scc_info_TimerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Utils.TimerConfig)
}
TimerConfig::TimerConfig(const TimerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time_unit().size() > 0) {
    time_unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_unit_);
  }
  // @@protoc_insertion_point(copy_constructor:Utils.TimerConfig)
}

void TimerConfig::SharedCtor() {
  time_unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TimerConfig::~TimerConfig() {
  // @@protoc_insertion_point(destructor:Utils.TimerConfig)
  SharedDtor();
}

void TimerConfig::SharedDtor() {
  time_unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TimerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimerConfig::descriptor() {
  ::protobuf_utils_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_utils_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimerConfig& TimerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_utils_2eproto::scc_info_TimerConfig.base);
  return *internal_default_instance();
}


void TimerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Utils.TimerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TimerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Utils.TimerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string time_unit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time_unit().data(), static_cast<int>(this->time_unit().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Utils.TimerConfig.time_unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Utils.TimerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Utils.TimerConfig)
  return false;
#undef DO_
}

void TimerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Utils.TimerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time_unit = 1;
  if (this->time_unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time_unit().data(), static_cast<int>(this->time_unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Utils.TimerConfig.time_unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->time_unit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Utils.TimerConfig)
}

::google::protobuf::uint8* TimerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Utils.TimerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time_unit = 1;
  if (this->time_unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time_unit().data(), static_cast<int>(this->time_unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Utils.TimerConfig.time_unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time_unit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Utils.TimerConfig)
  return target;
}

size_t TimerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Utils.TimerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string time_unit = 1;
  if (this->time_unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time_unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Utils.TimerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Utils.TimerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Utils.TimerConfig)
    MergeFrom(*source);
  }
}

void TimerConfig::MergeFrom(const TimerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Utils.TimerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_unit().size() > 0) {

    time_unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_unit_);
  }
}

void TimerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Utils.TimerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerConfig::CopyFrom(const TimerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Utils.TimerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerConfig::IsInitialized() const {
  return true;
}

void TimerConfig::Swap(TimerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimerConfig::InternalSwap(TimerConfig* other) {
  using std::swap;
  time_unit_.Swap(&other->time_unit_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimerConfig::GetMetadata() const {
  protobuf_utils_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_utils_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Utils
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Utils::Config* Arena::CreateMaybeMessage< ::Utils::Config >(Arena* arena) {
  return Arena::CreateInternal< ::Utils::Config >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Utils::LoggerConfig* Arena::CreateMaybeMessage< ::Utils::LoggerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Utils::LoggerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Utils::TimerConfig* Arena::CreateMaybeMessage< ::Utils::TimerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Utils::TimerConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
