// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorRT.proto

#ifndef PROTOBUF_INCLUDED_tensorRT_2eproto
#define PROTOBUF_INCLUDED_tensorRT_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorRT_2eproto 

namespace protobuf_tensorRT_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorRT_2eproto
namespace TensorRTConfig {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace TensorRTConfig
namespace google {
namespace protobuf {
template<> ::TensorRTConfig::Config* Arena::CreateMaybeMessage<::TensorRTConfig::Config>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace TensorRTConfig {

// ===================================================================

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TensorRTConfig.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input_tensor_names = 1;
  int input_tensor_names_size() const;
  void clear_input_tensor_names();
  static const int kInputTensorNamesFieldNumber = 1;
  const ::std::string& input_tensor_names(int index) const;
  ::std::string* mutable_input_tensor_names(int index);
  void set_input_tensor_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input_tensor_names(int index, ::std::string&& value);
  #endif
  void set_input_tensor_names(int index, const char* value);
  void set_input_tensor_names(int index, const char* value, size_t size);
  ::std::string* add_input_tensor_names();
  void add_input_tensor_names(const ::std::string& value);
  #if LANG_CXX11
  void add_input_tensor_names(::std::string&& value);
  #endif
  void add_input_tensor_names(const char* value);
  void add_input_tensor_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_tensor_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_tensor_names();

  // repeated string output_tensor_names = 2;
  int output_tensor_names_size() const;
  void clear_output_tensor_names();
  static const int kOutputTensorNamesFieldNumber = 2;
  const ::std::string& output_tensor_names(int index) const;
  ::std::string* mutable_output_tensor_names(int index);
  void set_output_tensor_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output_tensor_names(int index, ::std::string&& value);
  #endif
  void set_output_tensor_names(int index, const char* value);
  void set_output_tensor_names(int index, const char* value, size_t size);
  ::std::string* add_output_tensor_names();
  void add_output_tensor_names(const ::std::string& value);
  #if LANG_CXX11
  void add_output_tensor_names(::std::string&& value);
  #endif
  void add_output_tensor_names(const char* value);
  void add_output_tensor_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output_tensor_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output_tensor_names();

  // string onnx_file = 3;
  void clear_onnx_file();
  static const int kOnnxFileFieldNumber = 3;
  const ::std::string& onnx_file() const;
  void set_onnx_file(const ::std::string& value);
  #if LANG_CXX11
  void set_onnx_file(::std::string&& value);
  #endif
  void set_onnx_file(const char* value);
  void set_onnx_file(const char* value, size_t size);
  ::std::string* mutable_onnx_file();
  ::std::string* release_onnx_file();
  void set_allocated_onnx_file(::std::string* onnx_file);

  // string engine_file = 4;
  void clear_engine_file();
  static const int kEngineFileFieldNumber = 4;
  const ::std::string& engine_file() const;
  void set_engine_file(const ::std::string& value);
  #if LANG_CXX11
  void set_engine_file(::std::string&& value);
  #endif
  void set_engine_file(const char* value);
  void set_engine_file(const char* value, size_t size);
  ::std::string* mutable_engine_file();
  ::std::string* release_engine_file();
  void set_allocated_engine_file(::std::string* engine_file);

  // int32 dla_core = 5;
  void clear_dla_core();
  static const int kDlaCoreFieldNumber = 5;
  ::google::protobuf::int32 dla_core() const;
  void set_dla_core(::google::protobuf::int32 value);

  // int32 batch_size = 6;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 6;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // bool int8 = 7;
  void clear_int8();
  static const int kInt8FieldNumber = 7;
  bool int8() const;
  void set_int8(bool value);

  // bool fp16 = 8;
  void clear_fp16();
  static const int kFp16FieldNumber = 8;
  bool fp16() const;
  void set_fp16(bool value);

  // bool bf16 = 9;
  void clear_bf16();
  static const int kBf16FieldNumber = 9;
  bool bf16() const;
  void set_bf16(bool value);

  // @@protoc_insertion_point(class_scope:TensorRTConfig.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_tensor_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_tensor_names_;
  ::google::protobuf::internal::ArenaStringPtr onnx_file_;
  ::google::protobuf::internal::ArenaStringPtr engine_file_;
  ::google::protobuf::int32 dla_core_;
  ::google::protobuf::int32 batch_size_;
  bool int8_;
  bool fp16_;
  bool bf16_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorRT_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// repeated string input_tensor_names = 1;
inline int Config::input_tensor_names_size() const {
  return input_tensor_names_.size();
}
inline void Config::clear_input_tensor_names() {
  input_tensor_names_.Clear();
}
inline const ::std::string& Config::input_tensor_names(int index) const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.input_tensor_names)
  return input_tensor_names_.Get(index);
}
inline ::std::string* Config::mutable_input_tensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:TensorRTConfig.Config.input_tensor_names)
  return input_tensor_names_.Mutable(index);
}
inline void Config::set_input_tensor_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.input_tensor_names)
  input_tensor_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config::set_input_tensor_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.input_tensor_names)
  input_tensor_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config::set_input_tensor_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_tensor_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TensorRTConfig.Config.input_tensor_names)
}
inline void Config::set_input_tensor_names(int index, const char* value, size_t size) {
  input_tensor_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TensorRTConfig.Config.input_tensor_names)
}
inline ::std::string* Config::add_input_tensor_names() {
  // @@protoc_insertion_point(field_add_mutable:TensorRTConfig.Config.input_tensor_names)
  return input_tensor_names_.Add();
}
inline void Config::add_input_tensor_names(const ::std::string& value) {
  input_tensor_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TensorRTConfig.Config.input_tensor_names)
}
#if LANG_CXX11
inline void Config::add_input_tensor_names(::std::string&& value) {
  input_tensor_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TensorRTConfig.Config.input_tensor_names)
}
#endif
inline void Config::add_input_tensor_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_tensor_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TensorRTConfig.Config.input_tensor_names)
}
inline void Config::add_input_tensor_names(const char* value, size_t size) {
  input_tensor_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TensorRTConfig.Config.input_tensor_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::input_tensor_names() const {
  // @@protoc_insertion_point(field_list:TensorRTConfig.Config.input_tensor_names)
  return input_tensor_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_input_tensor_names() {
  // @@protoc_insertion_point(field_mutable_list:TensorRTConfig.Config.input_tensor_names)
  return &input_tensor_names_;
}

// repeated string output_tensor_names = 2;
inline int Config::output_tensor_names_size() const {
  return output_tensor_names_.size();
}
inline void Config::clear_output_tensor_names() {
  output_tensor_names_.Clear();
}
inline const ::std::string& Config::output_tensor_names(int index) const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.output_tensor_names)
  return output_tensor_names_.Get(index);
}
inline ::std::string* Config::mutable_output_tensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:TensorRTConfig.Config.output_tensor_names)
  return output_tensor_names_.Mutable(index);
}
inline void Config::set_output_tensor_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.output_tensor_names)
  output_tensor_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config::set_output_tensor_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.output_tensor_names)
  output_tensor_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config::set_output_tensor_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_tensor_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TensorRTConfig.Config.output_tensor_names)
}
inline void Config::set_output_tensor_names(int index, const char* value, size_t size) {
  output_tensor_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TensorRTConfig.Config.output_tensor_names)
}
inline ::std::string* Config::add_output_tensor_names() {
  // @@protoc_insertion_point(field_add_mutable:TensorRTConfig.Config.output_tensor_names)
  return output_tensor_names_.Add();
}
inline void Config::add_output_tensor_names(const ::std::string& value) {
  output_tensor_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TensorRTConfig.Config.output_tensor_names)
}
#if LANG_CXX11
inline void Config::add_output_tensor_names(::std::string&& value) {
  output_tensor_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TensorRTConfig.Config.output_tensor_names)
}
#endif
inline void Config::add_output_tensor_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_tensor_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TensorRTConfig.Config.output_tensor_names)
}
inline void Config::add_output_tensor_names(const char* value, size_t size) {
  output_tensor_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TensorRTConfig.Config.output_tensor_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::output_tensor_names() const {
  // @@protoc_insertion_point(field_list:TensorRTConfig.Config.output_tensor_names)
  return output_tensor_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_output_tensor_names() {
  // @@protoc_insertion_point(field_mutable_list:TensorRTConfig.Config.output_tensor_names)
  return &output_tensor_names_;
}

// string onnx_file = 3;
inline void Config::clear_onnx_file() {
  onnx_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::onnx_file() const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.onnx_file)
  return onnx_file_.GetNoArena();
}
inline void Config::set_onnx_file(const ::std::string& value) {
  
  onnx_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.onnx_file)
}
#if LANG_CXX11
inline void Config::set_onnx_file(::std::string&& value) {
  
  onnx_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TensorRTConfig.Config.onnx_file)
}
#endif
inline void Config::set_onnx_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  onnx_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TensorRTConfig.Config.onnx_file)
}
inline void Config::set_onnx_file(const char* value, size_t size) {
  
  onnx_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TensorRTConfig.Config.onnx_file)
}
inline ::std::string* Config::mutable_onnx_file() {
  
  // @@protoc_insertion_point(field_mutable:TensorRTConfig.Config.onnx_file)
  return onnx_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_onnx_file() {
  // @@protoc_insertion_point(field_release:TensorRTConfig.Config.onnx_file)
  
  return onnx_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_onnx_file(::std::string* onnx_file) {
  if (onnx_file != NULL) {
    
  } else {
    
  }
  onnx_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onnx_file);
  // @@protoc_insertion_point(field_set_allocated:TensorRTConfig.Config.onnx_file)
}

// string engine_file = 4;
inline void Config::clear_engine_file() {
  engine_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::engine_file() const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.engine_file)
  return engine_file_.GetNoArena();
}
inline void Config::set_engine_file(const ::std::string& value) {
  
  engine_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.engine_file)
}
#if LANG_CXX11
inline void Config::set_engine_file(::std::string&& value) {
  
  engine_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TensorRTConfig.Config.engine_file)
}
#endif
inline void Config::set_engine_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  engine_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TensorRTConfig.Config.engine_file)
}
inline void Config::set_engine_file(const char* value, size_t size) {
  
  engine_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TensorRTConfig.Config.engine_file)
}
inline ::std::string* Config::mutable_engine_file() {
  
  // @@protoc_insertion_point(field_mutable:TensorRTConfig.Config.engine_file)
  return engine_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_engine_file() {
  // @@protoc_insertion_point(field_release:TensorRTConfig.Config.engine_file)
  
  return engine_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_engine_file(::std::string* engine_file) {
  if (engine_file != NULL) {
    
  } else {
    
  }
  engine_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), engine_file);
  // @@protoc_insertion_point(field_set_allocated:TensorRTConfig.Config.engine_file)
}

// int32 dla_core = 5;
inline void Config::clear_dla_core() {
  dla_core_ = 0;
}
inline ::google::protobuf::int32 Config::dla_core() const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.dla_core)
  return dla_core_;
}
inline void Config::set_dla_core(::google::protobuf::int32 value) {
  
  dla_core_ = value;
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.dla_core)
}

// int32 batch_size = 6;
inline void Config::clear_batch_size() {
  batch_size_ = 0;
}
inline ::google::protobuf::int32 Config::batch_size() const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.batch_size)
  return batch_size_;
}
inline void Config::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.batch_size)
}

// bool int8 = 7;
inline void Config::clear_int8() {
  int8_ = false;
}
inline bool Config::int8() const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.int8)
  return int8_;
}
inline void Config::set_int8(bool value) {
  
  int8_ = value;
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.int8)
}

// bool fp16 = 8;
inline void Config::clear_fp16() {
  fp16_ = false;
}
inline bool Config::fp16() const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.fp16)
  return fp16_;
}
inline void Config::set_fp16(bool value) {
  
  fp16_ = value;
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.fp16)
}

// bool bf16 = 9;
inline void Config::clear_bf16() {
  bf16_ = false;
}
inline bool Config::bf16() const {
  // @@protoc_insertion_point(field_get:TensorRTConfig.Config.bf16)
  return bf16_;
}
inline void Config::set_bf16(bool value) {
  
  bf16_ = value;
  // @@protoc_insertion_point(field_set:TensorRTConfig.Config.bf16)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace TensorRTConfig

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorRT_2eproto
