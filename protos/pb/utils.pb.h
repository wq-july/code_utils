// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utils.proto

#ifndef PROTOBUF_INCLUDED_utils_2eproto
#define PROTOBUF_INCLUDED_utils_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_utils_2eproto 

namespace protobuf_utils_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_utils_2eproto
namespace Utils {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class LoggerConfig;
class LoggerConfigDefaultTypeInternal;
extern LoggerConfigDefaultTypeInternal _LoggerConfig_default_instance_;
class TimerConfig;
class TimerConfigDefaultTypeInternal;
extern TimerConfigDefaultTypeInternal _TimerConfig_default_instance_;
}  // namespace Utils
namespace google {
namespace protobuf {
template<> ::Utils::Config* Arena::CreateMaybeMessage<::Utils::Config>(Arena*);
template<> ::Utils::LoggerConfig* Arena::CreateMaybeMessage<::Utils::LoggerConfig>(Arena*);
template<> ::Utils::TimerConfig* Arena::CreateMaybeMessage<::Utils::TimerConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Utils {

// ===================================================================

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Utils.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Utils.LoggerConfig logger_config = 1;
  bool has_logger_config() const;
  void clear_logger_config();
  static const int kLoggerConfigFieldNumber = 1;
  private:
  const ::Utils::LoggerConfig& _internal_logger_config() const;
  public:
  const ::Utils::LoggerConfig& logger_config() const;
  ::Utils::LoggerConfig* release_logger_config();
  ::Utils::LoggerConfig* mutable_logger_config();
  void set_allocated_logger_config(::Utils::LoggerConfig* logger_config);

  // .Utils.TimerConfig timer_config = 2;
  bool has_timer_config() const;
  void clear_timer_config();
  static const int kTimerConfigFieldNumber = 2;
  private:
  const ::Utils::TimerConfig& _internal_timer_config() const;
  public:
  const ::Utils::TimerConfig& timer_config() const;
  ::Utils::TimerConfig* release_timer_config();
  ::Utils::TimerConfig* mutable_timer_config();
  void set_allocated_timer_config(::Utils::TimerConfig* timer_config);

  // @@protoc_insertion_point(class_scope:Utils.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Utils::LoggerConfig* logger_config_;
  ::Utils::TimerConfig* timer_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoggerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Utils.LoggerConfig) */ {
 public:
  LoggerConfig();
  virtual ~LoggerConfig();

  LoggerConfig(const LoggerConfig& from);

  inline LoggerConfig& operator=(const LoggerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoggerConfig(LoggerConfig&& from) noexcept
    : LoggerConfig() {
    *this = ::std::move(from);
  }

  inline LoggerConfig& operator=(LoggerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoggerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggerConfig* internal_default_instance() {
    return reinterpret_cast<const LoggerConfig*>(
               &_LoggerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoggerConfig* other);
  friend void swap(LoggerConfig& a, LoggerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoggerConfig* New() const final {
    return CreateMaybeMessage<LoggerConfig>(NULL);
  }

  LoggerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoggerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoggerConfig& from);
  void MergeFrom(const LoggerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string console_log_levels = 3;
  int console_log_levels_size() const;
  void clear_console_log_levels();
  static const int kConsoleLogLevelsFieldNumber = 3;
  const ::std::string& console_log_levels(int index) const;
  ::std::string* mutable_console_log_levels(int index);
  void set_console_log_levels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_console_log_levels(int index, ::std::string&& value);
  #endif
  void set_console_log_levels(int index, const char* value);
  void set_console_log_levels(int index, const char* value, size_t size);
  ::std::string* add_console_log_levels();
  void add_console_log_levels(const ::std::string& value);
  #if LANG_CXX11
  void add_console_log_levels(::std::string&& value);
  #endif
  void add_console_log_levels(const char* value);
  void add_console_log_levels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& console_log_levels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_console_log_levels();

  // string log_file_path = 1;
  void clear_log_file_path();
  static const int kLogFilePathFieldNumber = 1;
  const ::std::string& log_file_path() const;
  void set_log_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_log_file_path(::std::string&& value);
  #endif
  void set_log_file_path(const char* value);
  void set_log_file_path(const char* value, size_t size);
  ::std::string* mutable_log_file_path();
  ::std::string* release_log_file_path();
  void set_allocated_log_file_path(::std::string* log_file_path);

  // bool enable_console_log = 2;
  void clear_enable_console_log();
  static const int kEnableConsoleLogFieldNumber = 2;
  bool enable_console_log() const;
  void set_enable_console_log(bool value);

  // @@protoc_insertion_point(class_scope:Utils.LoggerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> console_log_levels_;
  ::google::protobuf::internal::ArenaStringPtr log_file_path_;
  bool enable_console_log_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Utils.TimerConfig) */ {
 public:
  TimerConfig();
  virtual ~TimerConfig();

  TimerConfig(const TimerConfig& from);

  inline TimerConfig& operator=(const TimerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimerConfig(TimerConfig&& from) noexcept
    : TimerConfig() {
    *this = ::std::move(from);
  }

  inline TimerConfig& operator=(TimerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerConfig* internal_default_instance() {
    return reinterpret_cast<const TimerConfig*>(
               &_TimerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TimerConfig* other);
  friend void swap(TimerConfig& a, TimerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimerConfig* New() const final {
    return CreateMaybeMessage<TimerConfig>(NULL);
  }

  TimerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimerConfig& from);
  void MergeFrom(const TimerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string time_unit = 1;
  void clear_time_unit();
  static const int kTimeUnitFieldNumber = 1;
  const ::std::string& time_unit() const;
  void set_time_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_time_unit(::std::string&& value);
  #endif
  void set_time_unit(const char* value);
  void set_time_unit(const char* value, size_t size);
  ::std::string* mutable_time_unit();
  ::std::string* release_time_unit();
  void set_allocated_time_unit(::std::string* time_unit);

  // @@protoc_insertion_point(class_scope:Utils.TimerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr time_unit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// .Utils.LoggerConfig logger_config = 1;
inline bool Config::has_logger_config() const {
  return this != internal_default_instance() && logger_config_ != NULL;
}
inline void Config::clear_logger_config() {
  if (GetArenaNoVirtual() == NULL && logger_config_ != NULL) {
    delete logger_config_;
  }
  logger_config_ = NULL;
}
inline const ::Utils::LoggerConfig& Config::_internal_logger_config() const {
  return *logger_config_;
}
inline const ::Utils::LoggerConfig& Config::logger_config() const {
  const ::Utils::LoggerConfig* p = logger_config_;
  // @@protoc_insertion_point(field_get:Utils.Config.logger_config)
  return p != NULL ? *p : *reinterpret_cast<const ::Utils::LoggerConfig*>(
      &::Utils::_LoggerConfig_default_instance_);
}
inline ::Utils::LoggerConfig* Config::release_logger_config() {
  // @@protoc_insertion_point(field_release:Utils.Config.logger_config)
  
  ::Utils::LoggerConfig* temp = logger_config_;
  logger_config_ = NULL;
  return temp;
}
inline ::Utils::LoggerConfig* Config::mutable_logger_config() {
  
  if (logger_config_ == NULL) {
    auto* p = CreateMaybeMessage<::Utils::LoggerConfig>(GetArenaNoVirtual());
    logger_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Utils.Config.logger_config)
  return logger_config_;
}
inline void Config::set_allocated_logger_config(::Utils::LoggerConfig* logger_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logger_config_;
  }
  if (logger_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logger_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logger_config, submessage_arena);
    }
    
  } else {
    
  }
  logger_config_ = logger_config;
  // @@protoc_insertion_point(field_set_allocated:Utils.Config.logger_config)
}

// .Utils.TimerConfig timer_config = 2;
inline bool Config::has_timer_config() const {
  return this != internal_default_instance() && timer_config_ != NULL;
}
inline void Config::clear_timer_config() {
  if (GetArenaNoVirtual() == NULL && timer_config_ != NULL) {
    delete timer_config_;
  }
  timer_config_ = NULL;
}
inline const ::Utils::TimerConfig& Config::_internal_timer_config() const {
  return *timer_config_;
}
inline const ::Utils::TimerConfig& Config::timer_config() const {
  const ::Utils::TimerConfig* p = timer_config_;
  // @@protoc_insertion_point(field_get:Utils.Config.timer_config)
  return p != NULL ? *p : *reinterpret_cast<const ::Utils::TimerConfig*>(
      &::Utils::_TimerConfig_default_instance_);
}
inline ::Utils::TimerConfig* Config::release_timer_config() {
  // @@protoc_insertion_point(field_release:Utils.Config.timer_config)
  
  ::Utils::TimerConfig* temp = timer_config_;
  timer_config_ = NULL;
  return temp;
}
inline ::Utils::TimerConfig* Config::mutable_timer_config() {
  
  if (timer_config_ == NULL) {
    auto* p = CreateMaybeMessage<::Utils::TimerConfig>(GetArenaNoVirtual());
    timer_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Utils.Config.timer_config)
  return timer_config_;
}
inline void Config::set_allocated_timer_config(::Utils::TimerConfig* timer_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timer_config_;
  }
  if (timer_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timer_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timer_config, submessage_arena);
    }
    
  } else {
    
  }
  timer_config_ = timer_config;
  // @@protoc_insertion_point(field_set_allocated:Utils.Config.timer_config)
}

// -------------------------------------------------------------------

// LoggerConfig

// string log_file_path = 1;
inline void LoggerConfig::clear_log_file_path() {
  log_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoggerConfig::log_file_path() const {
  // @@protoc_insertion_point(field_get:Utils.LoggerConfig.log_file_path)
  return log_file_path_.GetNoArena();
}
inline void LoggerConfig::set_log_file_path(const ::std::string& value) {
  
  log_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Utils.LoggerConfig.log_file_path)
}
#if LANG_CXX11
inline void LoggerConfig::set_log_file_path(::std::string&& value) {
  
  log_file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Utils.LoggerConfig.log_file_path)
}
#endif
inline void LoggerConfig::set_log_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Utils.LoggerConfig.log_file_path)
}
inline void LoggerConfig::set_log_file_path(const char* value, size_t size) {
  
  log_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Utils.LoggerConfig.log_file_path)
}
inline ::std::string* LoggerConfig::mutable_log_file_path() {
  
  // @@protoc_insertion_point(field_mutable:Utils.LoggerConfig.log_file_path)
  return log_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoggerConfig::release_log_file_path() {
  // @@protoc_insertion_point(field_release:Utils.LoggerConfig.log_file_path)
  
  return log_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoggerConfig::set_allocated_log_file_path(::std::string* log_file_path) {
  if (log_file_path != NULL) {
    
  } else {
    
  }
  log_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_file_path);
  // @@protoc_insertion_point(field_set_allocated:Utils.LoggerConfig.log_file_path)
}

// bool enable_console_log = 2;
inline void LoggerConfig::clear_enable_console_log() {
  enable_console_log_ = false;
}
inline bool LoggerConfig::enable_console_log() const {
  // @@protoc_insertion_point(field_get:Utils.LoggerConfig.enable_console_log)
  return enable_console_log_;
}
inline void LoggerConfig::set_enable_console_log(bool value) {
  
  enable_console_log_ = value;
  // @@protoc_insertion_point(field_set:Utils.LoggerConfig.enable_console_log)
}

// repeated string console_log_levels = 3;
inline int LoggerConfig::console_log_levels_size() const {
  return console_log_levels_.size();
}
inline void LoggerConfig::clear_console_log_levels() {
  console_log_levels_.Clear();
}
inline const ::std::string& LoggerConfig::console_log_levels(int index) const {
  // @@protoc_insertion_point(field_get:Utils.LoggerConfig.console_log_levels)
  return console_log_levels_.Get(index);
}
inline ::std::string* LoggerConfig::mutable_console_log_levels(int index) {
  // @@protoc_insertion_point(field_mutable:Utils.LoggerConfig.console_log_levels)
  return console_log_levels_.Mutable(index);
}
inline void LoggerConfig::set_console_log_levels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Utils.LoggerConfig.console_log_levels)
  console_log_levels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LoggerConfig::set_console_log_levels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Utils.LoggerConfig.console_log_levels)
  console_log_levels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LoggerConfig::set_console_log_levels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  console_log_levels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Utils.LoggerConfig.console_log_levels)
}
inline void LoggerConfig::set_console_log_levels(int index, const char* value, size_t size) {
  console_log_levels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Utils.LoggerConfig.console_log_levels)
}
inline ::std::string* LoggerConfig::add_console_log_levels() {
  // @@protoc_insertion_point(field_add_mutable:Utils.LoggerConfig.console_log_levels)
  return console_log_levels_.Add();
}
inline void LoggerConfig::add_console_log_levels(const ::std::string& value) {
  console_log_levels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Utils.LoggerConfig.console_log_levels)
}
#if LANG_CXX11
inline void LoggerConfig::add_console_log_levels(::std::string&& value) {
  console_log_levels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Utils.LoggerConfig.console_log_levels)
}
#endif
inline void LoggerConfig::add_console_log_levels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  console_log_levels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Utils.LoggerConfig.console_log_levels)
}
inline void LoggerConfig::add_console_log_levels(const char* value, size_t size) {
  console_log_levels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Utils.LoggerConfig.console_log_levels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoggerConfig::console_log_levels() const {
  // @@protoc_insertion_point(field_list:Utils.LoggerConfig.console_log_levels)
  return console_log_levels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LoggerConfig::mutable_console_log_levels() {
  // @@protoc_insertion_point(field_mutable_list:Utils.LoggerConfig.console_log_levels)
  return &console_log_levels_;
}

// -------------------------------------------------------------------

// TimerConfig

// string time_unit = 1;
inline void TimerConfig::clear_time_unit() {
  time_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TimerConfig::time_unit() const {
  // @@protoc_insertion_point(field_get:Utils.TimerConfig.time_unit)
  return time_unit_.GetNoArena();
}
inline void TimerConfig::set_time_unit(const ::std::string& value) {
  
  time_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Utils.TimerConfig.time_unit)
}
#if LANG_CXX11
inline void TimerConfig::set_time_unit(::std::string&& value) {
  
  time_unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Utils.TimerConfig.time_unit)
}
#endif
inline void TimerConfig::set_time_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Utils.TimerConfig.time_unit)
}
inline void TimerConfig::set_time_unit(const char* value, size_t size) {
  
  time_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Utils.TimerConfig.time_unit)
}
inline ::std::string* TimerConfig::mutable_time_unit() {
  
  // @@protoc_insertion_point(field_mutable:Utils.TimerConfig.time_unit)
  return time_unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimerConfig::release_time_unit() {
  // @@protoc_insertion_point(field_release:Utils.TimerConfig.time_unit)
  
  return time_unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimerConfig::set_allocated_time_unit(::std::string* time_unit) {
  if (time_unit != NULL) {
    
  } else {
    
  }
  time_unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_unit);
  // @@protoc_insertion_point(field_set_allocated:Utils.TimerConfig.time_unit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Utils

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_utils_2eproto
